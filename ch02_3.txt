ch02_3

tsconfig.json에 대해서(텍스트 파일만 읽어도 괜찮다!)
tsc --help를 터미널에서 실행하면 tsc 문법이 나온다.
tsc [options] [file...] 구조를 가진다.

tsconfig.json은
{
  "compilerOptions": {...생략...},
  "include": ["src/**/*"]
}의 구조를 가진다.
compilerOptions 항목은 tsc 문법의 [options] 나타낸다!!
include 항목은 [file...]으로 대상 파일 목록을 나타낸다.
src/**/* : src 디렉터리 + 하위 디렉터리의 모든 파일!

충격! nodejs와 웹브라우저는 물리적으로 동작하는 방식이 다르다!
따라서 모듈로 분할된 JS코드도 nodejs와 웹브라우저에서 다르게 동작한다!
JS모듈은 웹브라우저에서 AMD(asynchronous module definition) 방식으로 동작
nodejs나 웹브라우저가 아닌 환경에서는 CommonJS 방식으로 동작!

-> module 키 : 동작 대상 플랫폼이 웹인지 node인지 구분해 맞는 방식으로 컴파일!
우리는 node이므로 값에 commonjs!

-> moduleResolution 키 : module 키 값이 commonjs면 node에서 동작하는 것이므로 이 키의 값은 항상 node로 설정!
만약 module 키 값이 amd면 이 키의 값은 classic로 설정!

-> target 키 : 트랜스파일할 대상 JS 버전 설정
es5를 쓰거나 최신의 nodejs를 사용중이라면 es6도 설정가능!

-> baseUrl, outDir 키 : 트랜스파일된 JS 파일을 저장하는 디렉터리 설정
tsc는 tsconfig.json 파일이 있는 Dir에서 실행.
baseUrl은 현재 디렉터리를 의미하는 .을 값으로 보통 설정
OutDir은 baseDir을 기준으로 하위 디렉터리의 이름, dist로 설정해서 dist Dir이 만들어졌다.

-> paths 키 : 소스 파일의 import 문에서 from 부분 해석할 때 찾는 Dir 설정
외부 패키지의 경우 node_modules에서 찾아야 하므로 node_modules/*도 값에 포함

-> esModuleInterop 키 : 오픈소스 JS 라이브러리 중에서는 웹 동작을 가정하에 만들어진 것이 있다. ex) chance 패키지
이들은 CommonJS 방식으로 동작하는 tsc에 혼란을 줄 수 있다! 따라서 chance 패키지가 동작하려면 true로 값 설정!

-> sourceMap 키 : 값이 true면 트랜스파일 Dir에 .js파일 외에 .js.map 파일이 만들어진다.
이 소스맵 파일은 변환된 JS 코드가 TS 코드 어디에 해당하는지 알려준다. 디버깅에 주로 사용

-> downlevelIteration 키 : 생성기라는 타입스크립트 구문이 있는데 이 구문이 잘 동작하려면 true!

-> noImplicitAny 키 : TS 컴파일러는 기본적으로 f(a, b)를 오류로 잡는다! 
매개변수 타입을 지정 안 했기 때문에 any 타입을 설정했다고 간주하는데 TS의 장점을 사용하는 것이 아니기 때문!
하지만 이 키의 값을 false로 설정하면 오류가 나지 않는다! 혼란을 줄이기 위해 일단 false!