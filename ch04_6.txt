ch04_6 - 클래스 메서드
function 함수와 this 키워드
function 키워드로 만든 함수는 Function 클래스의 인스턴스, 즉 함수는 개체다.
객체지향 언어에서 인스턴스는 this 키워드를 사용할 수 있다!!
TS에서 function 키워드로 만든 함수에 this 사용 가능
화살표 함수로 만든 함수에는 this 키워드 사용 불가능

메서드(method)란?
TS에서 메서드는 function으로 만든 함수 표현식을 담고 있는 속성
export class A {
  value: number = 1;
  method: () => void = function(): void {
    console.log(`value: ${this.value}`);
  }
}
위 클래스 A는 value, method라는 2개의 속성을 갖는다.
value는 1이라는 값, method는 () => void 타입의 함수 표현식을 설정
this.value는 1이 된다!
import {A} from './A'
let a: A = new A;
a.method() // value: 1 출력
이렇게 출력하는 이유는 A라는 객체는 value에 1을 갖고 만들어지기 때문이다!
메서드 속성을 분석하면
method 속성은 
() => void 타입, 즉 리턴값이 없는 함수 타입인데
function(): void, 리턴값이 없고
아래 몸통을 실행한다.

클래스 메서드 구문
위에 작성한 클래스 A는 구현에도 가독성에도 불리
TS는 클래스 속성 중 function 키워드를 생략할 수 있게 하는 단축 구문 제공
export class B {
  constructor(public value: number = 1) {}
  method(): void {
    console.log(`value: ${this.value}`)
  }
}
let b: B = new B(2)
b.method() // value: 2 출력
2를 전달한다~

정적 메서드
클래스의 속성은 static 수정자를 속성 앞에 붙여서 정적으로 만들 수 있다!
메서드도 속성이기에 static 붙일 수 있다.
클래스 이름.정적메서드() 형태로 호출
export class C {
  static whoAreYou(): string {
    return `I'm class C`
  }
}

export class C {
  static whoAreYou(): string {
    return `I'm class D`
  }
}
정적인 함수 whoAreYou는 string을 반환하고 몸통 실행

console.log(C.whoAreYou()) // I'm class C 출력
console.log(D.whoAreYou()) // I'm class D 출력

메서드 체인(method chain)
제이쿼리와 같은 라이브러리는 객체의 메서드를 이어서 호출하는 방식의 코드 작성 가능
이러한 방식을 메서드 체인이라고 한다.
$("#p1").css("color", "red").slideUp(2000).slideDown(2000);
TS로 메서드 체인을 구현하려면 메서드가 항상 this를 반환하게 한다!
export class calculator {
  constructor(public value: number = 0) {}
  add(value: number) {
    this.value += value
    return this
  }
  multiply(value: number) {
    this.value *= value
    return this
  }
}

let cale = new calculator;
let result = calc.add(1).add(2).multiply(3).multiply(4).value;
console.log(result) // 36 출력