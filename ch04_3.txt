ch04_3 - 화살표 함수와 표현식 문
ESNext와 TS는 => 기호로 만드는 화살표 함수도 제공
const 함수 이름 = (...): 반환 타입 => 함수 몸통
함수 몸통은 중괄호를 사용할 수도 있고 생략할 수도 있다.
중괄호 사용 여부에 따라 TS 문법이 동작하는 방식이 실행문 방식과 표현식 문 방식으로 달라진다.

실행식과 표현식 문
실행문 지향 언어(execution-oriented language)와 표현식 지향 언어(expression-oriented language)로 구분되어 왔다.
실행문 지향 언어 예시 : C언어
표현식 지향 언어 예시 : 스칼라(scala)
ES5 JS까지는 실행문 지향 언어
ESNext와 TS부터는 실행문과 표현식 문을 동시 지원 => 다중 패러다임 언어(multi-paradigm language)
실행문 : CPU에서 실행되는 코드 / CPU에서 실행만 되고 결과를 알려주지 않음 / return 키워드를 사용해야 결과를 알 수 있다.
표현식 문 : CPU에서 실행된 결과를 굳이 return 키워드를 사용하지 않아도 알려줌

코드 예시
let x;
x = 1;
이면 충분하다.

let x = 10;
if(x > 0)
  x = 1;
여기서는 CPU가 x > 0 부분을 평가하고 true나 false를 알려주지 않으면 if문이 제대로 동작할 수 없다.
하지만 if(return x > 0) x = 1;로 작성하기에는 번거로워진다..
그렇기 때문에 똑같이 CPU에서 실행되는 구문이라도 x>0처럼 return 키워드 없이 결괏값을 반환하는 실행문이 필요하다.
이를 표현식 문(expression statement)라고 부른다.
-> val x = if(a>b) a else b와 같은 코드는 실행문에서는 불가능하고 표현식에는 가능하다! if문이 값을 반환하기 때문이다!

복합 실행문
if(조건식) 실행문;
if(조건식) {실행문1; 실행문2;};
2번째가 복합 실행문이다.
여러 실행문을 한 개처럼 인식하게 한다.
복합 실행문에서 변수의 유효 범위는 지역 범위!!!!

return 키워드
실행문 기반 언어는 CPU에서 실행된 결과를 알려주지 않는다.
따라서 함수 몸통에서의 결과를 반환하지 않는다.
이를 해결하기 위해서 return 키워드를 도입했다.
다만 return 키워드는 함수 몸통에서만 사용할 수 있다. 함수 복합 실행문{} 안에서만!
잘못 이해하는 것을 방지하기 위해서다! 잘못된 예) if(return x > 0) x = 1;

표현식과 표현식 문의 차이
C언어에서 a > b 코드는 표현식이라고 한다.
이 자체는 실행문의 일부일 뿐, 그 자체가 실행문인 것은 아니다.
하지만 const funcA = (a: number, b: number): boolean => a > b;
에서 a > b 코드는 그 자체가 실행문이기 때문에 표현식 문으로 구분한다.
관습적으로 ESNext와 TS에서 표현식 문에는 세미콜론을 붙이지 않는다!