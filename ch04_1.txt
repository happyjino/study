ch04_1 - 함수 선언문
function 키워드로 함수 만들기
function 함수이름(매개변수1: 타입1, 매개변수2: 타입2[, ...]) : 반환값 타입 {
  함수 몸통
}

매개변수 vs 인자
함수를 선언할 때는 매개변수
함수를 호출해서 사용할 때 전달하는 값은 인자!

매개변수에서 타입을 생략할 수는 있으나! 바람직하지 않다!

void 타입
값을 반환하지 않는 것
void 타입은 함수 반환 타입으로만 사용 가능하다!

함수 시그니처(function signature)
변수에 타입이 있듯이 함수 또한 타입이 있는데 함수의 타입을 함수 시그니처라고 한다!
(매개변수1 타입, 매개변수2 타입[, ...]) => 반환값 타입
ex) let printMe: (string, number) => void = function (name: string, age: number): void {}
만약 매개변수가 없으면 단순히 ()로 표현한다. () => void라면 매개변수도 반환값도 없는 함수 시그니처이다.

type 키워드!
type 키워드를 사용해 기존에 존재하는 타입을 단순히 이름만 바꿔서 사용할 수 있게 해준다.
이런 기능을 타입 별칭(type alias)라고 한다.
type 새로운 타입 = 기존 타입
ex) type stringNumberFunc = (string, number) => void
let f: stringNumberFunc = function(a: string, b: number): void {}
let g: stringNumberFunc = function(c: string, d: number): void {}
위 예시에서 (string, number) => void 함수 시그니처를 stringNumberFunc 라는 이름의 타입 별칭을 만들었다.
함수 시그니처를 통해 매개변수의 개수나 타입, 반환 타입이 다른 함수를 선언하는 잘못을 방지할 수 있다.

undefined 관련 주의 사항
undefined는 타입 계층도에서 최하위 타입이다.
그렇기 때문에 어떤 함수의 매개변수가 object 타입을 원해도 undefined를 넣어주면 괜찮다.
하지만 이후 코드에서 객체의 속성을 사용한다면 에러가 발생할 것이다.
그렇기 때문에 undefined인지 판별하는 코드를 포함해야 한다.
null과 undefined는 TS나 ESNext JS에서 같다!!

선택적 매개변수
매개변수도 선택 속성처럼 ?와 함께 사용하면 선택적 매개변수가 된다.
선택적 매개변수가 있는 함수의 시그니처는 타입 뒤에 물음표를 붙인다.
ex) type OptionalArgFunc = (string, number?) => void;