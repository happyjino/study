ch04_4 - 일등 함수 살펴보기
콜백 함수(callback function)
콜백 함수 : 매개변수 형태로 동작하는 함수
일등 함수(first-class function) : 프로그래밍 언어가 제공하는 기능
일등 함수 기능을 제공하는 언어에서 함수는 함수 표현식이라는 일종의 값!
-> 변수에 담을 수 있다는 것! -> 함수 표현식을 매개변수로 받을 수 있다!
ex) const f = (callback: () => void): void => callback();
프레임워크 : 프로그램의 전체 구조를 쉽게 작성할 수 있게 설계된 라이브러리
프레임워크는 여러 프로그램이 공통으로 구현해야 할 함수를 API라는 이름으로 제공
API는 프로그램마다 새로운 내용을 추가로 구현할 수 있게 지원해야 하는데
콜백 함수는 API 구현에 매우 유용한다!!!!

중첩 함수
함수는 변수에 담긴 함수 표현식이므로 함수 안에 또 다른 함수를 중첩(nested)해서 구현 가능
함수 안에서 함수를 만드는 거라고 생각하면 될 듯하다.

고차 함수와 클로저, 그리고 부분 함수
고차 함수(high-order function): 또 다른 함수를 반환하는 함수!
함수형 언어에서 함수는 단순히 함수 표현식이라는 값! -> 다른 함수를 반환할 수 있다
고차 함수는 함수형 프로그래밍에서 매우매우 중요하다!!!
ex) const add = (a: number): (number) => number => (b: number): number => a + b
const result = add(1)(2);
꽤나 이해하기 어려운 구조다...
쉽게 하기 위해 number 타입의 매개변수를 받아 number 타입의 값을 반환하는 함수 시그니처를 정의하자.
type NumberToNumberFunc = (number) => number;
export const add = (a: number): NumberToNumberFunc => {
  const _add: NumberToNumberFunc = (b: number): number => {
    return a + b
  }
  return _add
}
_add 함수는 NumberToNumberFunc 타입이다.
이처럼 고차 함수는 중첩 함수를 반환할 수 있다.
여기서 a는 add 함수의 매개변수로 _add 함수 기준에서는 외부 변수이다.
return a + b와 같은 형태를 클로저(closure)라고 하는데 고차 함수에서 필수 기능이다.
나중에 살펴볼 것이다.
이제 만든 함수를 사용해보자
let fn: NumberToNumberFunc = add(1);
let result = fn(2)
console.log(result) // 3 출력
console.log(add(1)(2)) // 3 출력
3차 고차 함수 예시: const multiply = a => b => c => a * b * c
만약 multiply 함수에 함수 호출 연산자 ()를 1개나 2개만 붙여서
multiply(1)이나 multiply(1)(2)로 사용하면 값이 아닌 함수를 반환!
이를 부분 애플리케이션이나 부분 적용 함수라고 한다!!
