ch04_5 - 함수 구현 기법
디폴트 매개변수(default parameter)
선택적 매개변수는 항상 그 값이 undefined로 고정된다!
-> 함수 호출 시 인수를 전달하지 않아도 매개변수의 기본값을 지정할 수 있다!
이를 디폴트 매개변수라고 한다.
(매개변수: 타입 = 매개변수 기본값)
이럴 경우 함수 호출 때 매개변수 age에 해당하는 값을 전달받지 못하면 기본값으로 설정된다!

객체 생성 시 값 부분을 생략할 수 있는 TS 구문
TS는 매개변수의 이름과 똑같은 이름의 속성을 가진 객체를 만들 수 있다!!
이때 속성값 부분을 생략할 수 있는 단축 구문(shorthand)을 제공
ex) const makePerson = (name: string, age: number) => {
  const person = {name, age} // {name: name, age: age}의 단축 표현
}
person이라는 객체를 만들 때, name, age와 똑같은 이름의 속성을 person에 넣는다!
이때 속성값 부분을 생략했다!! name은 name, age는 age라는 것을 생략!

객체를 반환하는 화살표 함수 만들기
export const makePerson = (name: string, age: number = 10): Person => ({name, age})
{}로만 감싸서 객체를 반환하면 컴파일러는 중괄호를 객체가 아닌 복합 실행무능로 해석한다.
따라서 위의 코드처럼 소괄호로 감싸주어야 한다.

매개변수에 비구조화 할당문 사용하기
export type Person = {name: string, age: number}
const printPerson = ({name, age}: Person): void => 
  console.log(`name: ${name}, age: ${age}`)
printPerson({name: 'Jack', age: 10}) // name: Jack, age: 10 출력
함수의 매개변수도 변수의 일종이므로 비구조화 할당문을 적용할 수 있다!
위의 코드에서는 {name, age}를 매개변수로 받는다.
그리고 객체를 넘겨줬다.

색인 키와 값으로 객체 만들기
ESNext에서는 다음과 같은 코드가 가능하다.
const makeObject = (key, value) => ({[key]: value})
이 코드는 객체의 속성 이름을 변수로 만들려고 할 때 사용한다!
[key] 부분이 'name'이면 {name: value} 형태, 'firstName'이면 {firstName: value} 형태로 객체를 생성한다.
이러한 형태의 타입을 색인 가능 타입(indexable type)이라 하고 타입은 아래처럼 명시한다.
type KeyType = {
  [key: string]: string
}
export const makeObject = (key: string, value: string): KeyType => ({[key]: value})
이렇게 사용해주면 된다. 색인 키와 값을 가지는 객체를 반환했다.