ch03_2 - 객체와 인터페이스
object 타입은 인터페이스와 클래스의 상위 타입이다.
object 타입으로 선언된 변수는 당연히 number, string, boolean 타입의 값을 가질 수는 없지만
속성 이름이 다른 객체를 모두 자유롭게 담을 수 있다! ex) let o: object = {name: 'Jack', age: 32}; o = {first: 1, second: 2};
TS에 인터페이스가 존재하는 이유는 위의 예시에서 볼 수 있다.
any처럼 동작하지 않고 o가 항상 name, age만 가질 수 있게 해서 first, second를 넣을 때는 오류가 발생하게 한다!

인터페이스 선언문
객체의 타입을 정의할 수 있게 하는 interface 제공
목적에 맞게 객체를 의미하는 중괄호로 속성과 속성의 타입 주석을 나열하는 형태로 사용
interface 인터페이스이름 { 
  속성이름[?]: 속성타입[,...]
}
위에서 [] 안에 있는 것은 써도 되고 안 써도 된다.
객체를 만들 때, 인터페이스 안의 속성이 부족하거나 많으면 오류가 발생할 것이다.

선택 속성 구문
속성이름?: 속성타입으로 표시한다.
어떤 속성은 있어도 되고 없어도 되는 형태로 만들 때 사용한다.
?가 없으면 필수 속성, ?가 있으면 선택 속성이 된다!
당연히 인터페이스에서 표기한다.

익명 인터페이스(anonymous interface)
TS는 interface 키워드 사용하지 않고, 인터페이스의 이름도 없는 인터페이스를 만들 수 있는데 이름 익명 인터페이스라고 한다.
ex)
let ai: {
  name: string
  age: number
  etc?: boolean
} = {name: 'Jack', age: 32}
함수를 구현할 때 주로 사용한다. 매개변수에 들어가는 것이다!
