ch03_5 - 객체의 타입 변환
타입 변환(type conversion)
특정 타입을 다른 타입으로 바꾸는 것
만약 let person: object = {name: "Jack", age: 32};
person.name 이렇게 사용하면 에러가 난다.
person 변수의 타입은 object인데 object 타입은 name 속성을 갖지 않기 때문이다!
이럴 때 타입 변환으로 해결할 수 있다.
(<{name: string}>person).name로 person 변수를 일시적으로 name 속성이 있는 타입,
즉 {name: string} 타입으로 변환해 person.name 속성값을 얻게 했다!

type conversion / type casting / type coercion
type conversion은 type casting, type coercion을 포함한다.
casting은 명시적, coercion은 암시적 변환을 나타낸다
명시적은 코드에 나타내는 것, 암시적은 나타내지 않아도 컴파일러가 처리한다는 의미!

타입 단언(type assertion)
(<타입>객체)
(객체 as 타입)
타입 단언문에는 위의 2가지 형태가 있다.
2가지 모두 ES5 JS 구문이 아니다. 
그렇기 때문에 타입 변환과 구분하기 위해서 타입 단언이라고 한다.

export default interface INameable {
  name: string
}가 있다고 하자.

import INameable from './INameable'
let obj: object = {name: 'Jack'}

let name1 = (<INameable>obj).name;
let name2 = (obj as INameable).name;
console.log(name1, name2) // Jack Jack
위를 보면 object 타입 객체 였던 obj는 INameable 타입 객체로 변환되어 자신에게 담긴 객체의 name 속성값을 얻는다!
이쪽이 조금 어려운 느낌이다.