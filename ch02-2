ch02-2

TS에서는 index.ts 같은 소스 파일을 모듈이라고 한다! 아하! 모듈이 이런거였군~
소스 파일 1개에 모두 구현해도 되지만 코드 관리와 유지, 보수를 위해 모듈마다 고유한 기능을 구현한다.
이를 모듈화(modulization)라고 한다!

소스코드를 여러 개 모듈로 분할하면 어떤 모듈에 어떤 내용이 있는지를 알게 해줘야 한다.
이를 위해서 export와 import를 사용하는 것이다!!!!!!!!!!!

현재 index.ts 소스코드를 Person.ts로 나눠 모듈화했다.
하지만 import, export를 사용하지 않았으므로 에러가 난다.

export 키워드를 추가한다. function, interface, class, type, let, const 앞에 붙일 수 있다.
import 키워드를 추가한다. import { 심벌 목록 } from '파일의 상대 경로' 형태로 추가한다.
이제 잘 실행된다.

import * as 심벌 from '파일상대경로' 로도 가능하다.

export default는 모듈 1개에 1개만 가능하다! import할 때, 중괄호 없이 사용가능!

외부 패키지와 import문
외부 패키지를 가져올 때는 이전에 말했듯이 -S로 일반 패키지 설치 / -D로 타입 패키지 설치한다. @types/패키지명
chance 패키지 : 그럴듯한 가짜 데이터 생성
ramda 패키지 : 함수형 유틸리티 패키지

chance 패키지는 Chance 클래스 하나만 export default 형태로 제공하므로 import Chance from 'chance'로 불러오고
ramda 패키지는 다양한 기능을 제공하므로 import * as R from 'ramda'로 불러온다.
그리고 node_modules 디렉터리에서 가져오는 패키지는 ./를 생략하고 사용한다.