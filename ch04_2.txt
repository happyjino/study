ch04_2 - 함수 표현식
함수는 객체다!
JS는 함수형 언어 '스킴(scheme)'과 프로토타입(prototype) 기반 객체지향 언어 '셀프(self)'를 모델로 만들어졌다.
그렇기에 함수형 언어, 객체지향 언어의 특징이 모두 있다.
TS 또한 마찬가지다.
JS에서 함수는 Function 클래스의 인스턴스이다.
ex) let add = new Function('a', 'b', 'return a + b');
let result = add(1,2);
console.log(result) // 3
여기서 함수를 변수 선언문 형태로 구현했다.
ex) function add(a, b) {return a + b}
let add2 = function(a, b) {return a + b}
2가지 방식으로 가능하다.
아래 방법을 함수 표현식이라고 한다.

일등 함수(first-class function)
프로그래밍 언어가 일등 함수 기능을 제공하면 함수형 프로그래밍 언어라고 한다.
JS와 TS는 함수형 프로그래밍 언어다 -> 일등 함수 기능 있음
일등 함수 : 함수와 변수를 구분하지 않는다는 의미!

표현식(expression)
프로그래밍 언어에서 표현식이라는 용어는 리터럴, 연산자, 변수, 함수 호출 등이 복합적으로 구성된 코드 형태
1 + 2 는 1과 2라는 리터럴과 +라는 연산자로 구성된다.
표현식은 항상 컴파일러에 의해 계산법이 적용되어 어떤 값이 된다!

함수 표현식
function(a, b) {return a + b} 부분을 함수 표현식이라고 한다.

계산법
컴파일러는 표현식을 만나면 계산법을 적용해서 어떤 값을 만든다.
조급한 계산법(eager evaluation) / 느긋한(지연) 계산법(lazy evaluation)
1 + 2를 만나면 조급한 계산법을 적용해 3이라는 값을 얻는다.
function(a, b) {return a + b}라는 함수 표현식을 만나면 a, b의 값을 모르므로 느긋한 계산법을 적용해 계산을 보류한다!

함수 호출 연산자
어떤 변수가 함수 표현식을 담고 있다면, 변수 이름 뒤에 함수 호출 연산자(function call operator)를 붙여서 호출한다.
함수 호출이란 함수 표현식의 몸통 부분을 실행
함수가 매개 변수를 요구한다면 호출 연산자 () 안에 매개변수 명시!
컴파일러는 함수 호출문을 만나면 미뤘던 함수 표현식에 조급한 계산법을 적용한다.

익명 함수
ex) let value = (function(a,b) {return a + b;})(1, 2);

const 키워드와 함수 표현식
let보다는 const 키워드가 함수 표현식을 담기에 적당하다.
함수 내용이 이후에 바뀔 수 없게 하기 때문이다!!
